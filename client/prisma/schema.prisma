// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String      @id @default(uuid())
  email     String      @unique
  name      String?
  password  String?
  role      String      @default("user")
  image_url String?
  recipes   Recipe[]
  votes     RecipeVote[]
  sessions  Session[]
  refreshTokens RefreshToken[]
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")

  @@map("users")
}

model Session {
  id           String   @id @default(uuid())
  userId       String   @map("user_id")
  sessionToken String   @unique @map("session_token")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now()) @map("created_at")

  @@map("sessions")
}

model RefreshToken {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")

  @@map("refresh_tokens")
}

model Ingredient {
  id             String           @id @default(uuid())
  name           String           @unique
  category       String?
  image_url      String?
  unit_of_measure String?
  recipeIngredients RecipeIngredient[]
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")

  @@map("ingredients")
}

model Recipe {
  id                String           @id @default(uuid())
  title             String
  description       String?
  image_url         String?
  prep_time_minutes Int?
  cook_time_minutes Int?
  servings          Int?
  difficulty        String?
  instructions      String?
  tags              String[]
  votes             Int             @default(0)
  rating            Float?
  featured          Boolean         @default(false)
  userId            String?         @map("user_id")
  user              User?           @relation(fields: [userId], references: [id])
  ingredients       RecipeIngredient[]
  recipeVotes       RecipeVote[]
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")

  @@map("recipes")
}

model RecipeIngredient {
  id           String     @id @default(uuid())
  recipeId     String     @map("recipe_id")
  ingredientId String     @map("ingredient_id")
  quantity     Float
  unit         String?
  notes        String?
  recipe       Recipe     @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")

  @@unique([recipeId, ingredientId])
  @@map("recipe_ingredients")
}

model RecipeVote {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  recipeId  String   @map("recipe_id")
  voteType  String   @map("vote_type") @db.VarChar(10)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  recipe    Recipe   @relation(fields: [recipeId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")

  @@unique([userId, recipeId])
  @@map("recipe_votes")
} 